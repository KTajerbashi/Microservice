@page "/dashboard"
@using ApiDashboard.Models
@using ApiDashboard.Services
@inject ApiService ApiService
@implements IDisposable

<h1 class="page-title">API Dashboard</h1>

<EditForm Model="@newUser" OnValidSubmit="@(() => CreateUser(new CancellationTokenSource().Token))">
    <div class="card mb-4">
        <div class="card-header bg-primary text-white">
            <h5>Create New User</h5>
        </div>
        <div class="card-body">
            <div class="form-group">
                <label for="name">Name</label>
                <InputText id="name" @bind-Value="newUser.Name" class="form-control" />
            </div>
            <div class="form-group">
                <label for="family">Family</label>
                <InputText id="family" @bind-Value="newUser.Family" class="form-control" />
            </div>
            <button type="submit" class="btn btn-primary mt-2">Create User</button>
            @if (!string.IsNullOrEmpty(createResult))
            {
                <div class="alert @(createResult.Contains("Error") ? "alert-danger" : "alert-success") mt-2">
                    @createResult
                </div>
            }
        </div>
    </div>
</EditForm>

<div class="card mb-5">
    <div class="card-header bg-dark text-white">
        <h5>API Test Panel</h5>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-md-3">
                <div class="input-group mb-3">
                    <input type="number" @bind="testDelay" class="form-control" placeholder="Delay in seconds" />
                    <button class="btn btn-outline-danger" @onclick="TestCancellation">
                        Test Cancellation
                    </button>
                </div>
            </div>
            <div class="col-md-9">
                @if (!string.IsNullOrEmpty(testResult))
                {
                    <div class="alert @(testResult.Contains("cancelled") ? "alert-warning" : "alert-success")">
                        @testResult
                    </div>
                }
            </div>
        </div>
    </div>
</div>



<div class="row">
    <div class="col-md-6">
        <div class="card mb-4">
            <div class="card-header bg-info text-white">
                <h5>Users (@users.Count)</h5>
                <button class="btn btn-sm btn-light float-end" @onclick="() => LoadUsers(new CancellationTokenSource().Token)">
                    <i class="fas fa-sync"></i> Refresh
                </button>
            </div>
            <div class="card-body">
                @if (usersLoading)
                {
                    <div class="text-center">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                }
                else if (users.Any())
                {
                    <ul class="list-group">
                        @foreach (var user in users)
                        {
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                <div>
                                    <h6 class="mb-1">@user.Name</h6>
                                    <small class="text-muted">@user.Email</small>
                                </div>
                                <span class="badge bg-primary rounded-pill">ID: @user.Id</span>
                            </li>
                        }
                    </ul>
                }
                else
                {
                    <p class="text-muted">No users found</p>
                }
            </div>
        </div>
    </div>

    <div class="col-md-6">
        <div class="card mb-4">
            <div class="card-header bg-secondary text-white">
                <h5>Recent Activity Logs (@logs.Count)</h5>
                <button class="btn btn-sm btn-light float-end" @onclick="() => LoadLogs(new CancellationTokenSource().Token)">
                    <i class="fas fa-sync"></i> Refresh
                </button>
            </div>
            <div class="card-body">
                @if (logsLoading)
                {
                    <div class="text-center">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                }
                else if (logs.Any())
                {
                    <div class="table-responsive">
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th>Date</th>
                                    <th>Status</th>
                                    <th>Message</th>
                                    <th>Duration</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var log in logs.OrderByDescending(l => l.StartDate))
                                {
                                    <tr>
                                        <td>@log.StartDate.ToString("g")</td>
                                        <td>
                                            <span class="badge @(log.IsCompleted ? "bg-success" : "bg-warning")">
                                                @(log.IsCompleted ? "Completed" : "Cancelled")
                                            </span>
                                        </td>
                                        <td>@log.Message</td>
                                        <td>@((log.EndDate - log.StartDate).TotalSeconds.ToString("0.00"))s</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <p class="text-muted">No logs available</p>
                }
            </div>
        </div>
    </div>
</div>


@code {
    private List<UserModel> users = new();
    private List<LogModel> logs = new();
    private UserModel newUser = new();
    private string createResult = string.Empty;
    private string testResult = string.Empty;
    private int testDelay = 2;
    private bool usersLoading = false;
    private bool logsLoading = false;
    private CancellationTokenSource? cts;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        await LoadUsers();
        await LoadLogs();
    }

    private async Task LoadUsers(CancellationToken cancellationToken = default)
    {
        usersLoading = true;
        StateHasChanged();

        try
        {
            users = await ApiService.GetUsersAsync(cancellationToken);
        }
        catch (OperationCanceledException)
        {
            Console.WriteLine("User loading was cancelled");
        }
        finally
        {
            usersLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadLogs(CancellationToken cancellationToken = default)
    {
        logsLoading = true;
        StateHasChanged();

        try
        {
            logs = await ApiService.GetLogsAsync(cancellationToken);
            logs = logs.OrderByDescending(item => item.StartDate).Take(5).ToList();
        }
        catch (OperationCanceledException)
        {
            Console.WriteLine("Log loading was cancelled");
        }
        finally
        {
            logsLoading = false;
            StateHasChanged();
        }
    }

    private async Task CreateUser(CancellationToken cancellationToken)
    {
        try
        {
            createResult = await ApiService.CreateUserAsync(newUser, cancellationToken);
            newUser = new UserModel();
            await LoadUsers(cancellationToken);
        }
        catch (OperationCanceledException)
        {
            createResult = "User creation was cancelled";
        }
        StateHasChanged();
    }

    private async Task TestCancellation()
    {
        cts?.Cancel();
        cts = new CancellationTokenSource();
        
        try
        {
            testResult = "Testing cancellation...";
            StateHasChanged();
            
            testResult = await ApiService.TestCancellationAsync(testDelay, cts.Token);
        }
        catch (OperationCanceledException)
        {
            testResult = $"Request was cancelled after {testDelay} seconds";
        }
        StateHasChanged();
    }

    public void Dispose()
    {
        cts?.Cancel();
        cts?.Dispose();
    }
}