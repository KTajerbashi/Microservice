@page "/login-sso"
@rendermode InteractiveServer
@using Architectures.BaseSources.Models
@inject IHttpClientFactory _httpClientFactory

<h3>SSO Login</h3>

<div class="mb-3">
    <input class="form-control" placeholder="Username" @bind="login.Username" />
</div>
<div class="mb-3">
    <input class="form-control" placeholder="Password" @bind="login.Password" type="password" />
</div>
<div class="mb-3">
    <input class="form-control" placeholder="Client ID" @bind="login.ClientId" />
</div>
<div class="mb-3">
    <input class="form-control" placeholder="Grant Type" @bind="login.GrantType" />
</div>
<div class="mb-3">
    <input class="form-control" placeholder="Return URL" @bind="login.ReturnUrl" />
</div>
<div>
    <button class="btn btn-primary" @onclick="Login">Login</button>
</div>

@if (!string.IsNullOrWhiteSpace(responseMessage))
{
    <p class="mt-3 text-info">@responseMessage</p>
}

@code {
    private LoginRequest login = new();
    private string responseMessage;

    private async Task Login()
    {
        var client = _httpClientFactory.CreateClient("ApiGateway");
        var response = await client.PostAsJsonAsync<LoginRequest>("sso/auth/index", login);

        if (response.IsSuccessStatusCode)
        {
            //var result = await response.Content.ReadAsStringAsync(); // or .ReadFromJsonAsync<T>()
            var result = await response.Content.ReadFromJsonAsync<LoginSSOResult>(); // or .ReadFromJsonAsync<T>()
            responseMessage = $"Success: {result.AccessToken}";
        }
        else
        {
            responseMessage = $"Error: {response.StatusCode} - {await response.Content.ReadAsStringAsync()}";
        }
    }
}
