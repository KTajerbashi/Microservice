@model DashboardViewModel
@{
    ViewData["Title"] = "API Dashboard";
}

<div class="container mt-5">
    <h1 class="text-center mb-4">API Dashboard</h1>

    <!-- Status Alerts -->
    @if (Model.OperationCancelled)
    {
        <div class="alert alert-warning alert-dismissible fade show" role="alert">
            <strong>Request was cancelled!</strong> The operation was cancelled by the user.
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (Model.ErrorMessage != null || TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @(Model.ErrorMessage ?? TempData["ErrorMessage"])
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <div class="row">
        <!-- Create User Card -->
        <div class="col-md-6 mb-4">
            <div class="card shadow">
                <div class="card-header bg-primary text-white">
                    <h5 class="card-title mb-0">Create New User</h5>
                </div>
                <div class="card-body">
                    <form asp-action="CreateUser" method="post">
                        <div class="mb-3">
                            <label for="name" class="form-label">Name</label>
                            <input type="text" class="form-control" id="name" name="Name" required>
                        </div>
                        <div class="mb-3">
                            <label for="family" class="form-label">Family</label>
                            <input type="text" class="form-control" id="family" name="family" required>
                        </div>

                        <button type="submit" class="btn btn-primary">Create User</button>
                    </form>
                </div>
            </div>
        </div>

        <!-- Users List Card -->
        <div class="col-md-6 mb-4">
            <div class="card shadow">
                <div class="card-header bg-info text-white">
                    <h5 class="card-title mb-0">Users (@Model.Users.Count)</h5>
                </div>
                <div class="card-body" style="max-height: 300px; overflow-y: auto;">
                    @if (Model.Users.Any())
                    {
                        <ul class="list-group">
                            @foreach (var user in Model.Users)
                            {
                                <li class="list-group-item d-flex justify-content-between align-items-center">
                                    <div>
                                        <h6 class="mb-1">@user.Name</h6>
                                        <small class="text-muted">@user.Email</small>
                                    </div>
                                    <span class="badge bg-primary rounded-pill">ID: @user.Id</span>
                                </li>
                            }
                        </ul>
                    }
                    else
                    {
                        <p class="text-muted">No users found</p>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Logs Card -->
    <div class="row mt-4">
        <div class="col-12">
            <div class="card shadow">
                <div class="card-header bg-secondary text-white">
                    <h5 class="card-title mb-0">Recent Activity Logs (@Model.Logs.Count)</h5>
                </div>
                <div class="card-body" style="max-height: 400px; overflow-y: auto;">
                    @if (Model.Logs.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th>Date</th>
                                        <th>Status</th>
                                        <th>Message</th>
                                        <th>Duration</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var log in Model.Logs.OrderByDescending(l => l.StartDate))
                                    {
                                        <tr>
                                            <td>@log.StartDate.ToString("g")</td>
                                            <td>
                                                <span class="badge @(log.IsCompleted ? "bg-success" : "bg-warning")">
                                                    @(log.IsCompleted ? "Completed" : "Cancelled")
                                                </span>
                                            </td>
                                            <td>@log.Message</td>
                                            <td>@((log.EndDate - log.StartDate).TotalSeconds.ToString("0.00"))s</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <p class="text-muted">No logs available</p>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- API Test Section -->
    <div class="row mt-4">
        <div class="col-12">
            <div class="card shadow">
                <div class="card-header bg-dark text-white">
                    <h5 class="card-title mb-0">API Test Panel</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <h6>Test Cancellation</h6>
                            <div class="input-group mb-3">
                                <input type="number" id="cancelDelay" class="form-control" placeholder="Delay in seconds" value="2">
                                <button class="btn btn-outline-danger" onclick="testCancellation()">Test Cancel</button>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div id="cancellationResult" class="alert" style="display: none;"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
            function testCancellation() {
                const delay = document.getElementById('cancelDelay').value;
                const resultDiv = document.getElementById('cancellationResult');

                resultDiv.style.display = 'block';
                resultDiv.className = 'alert alert-info';
                resultDiv.textContent = `Testing cancellation after ${delay} seconds...`;

                // Create an AbortController for cancellation
                const controller = new AbortController();
                const timeoutId = setTimeout(() => controller.abort(), delay * 1000);

                fetch(`https://localhost:7271/api/user?delay=${delay}`, {
                    signal: controller.signal,
                    mode: 'cors', // Ensure CORS mode
                    credentials: 'include' // If you need cookies
                })
                .then(response => {
                    if (!response.ok){
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    resultDiv.textContent = `Rsponse: ${response.json()}`;
                    return response.json();
                })
                .then(data => {
                    clearTimeout(timeoutId);
                    resultDiv.className = 'alert alert-success';
                    resultDiv.textContent = 'Operation completed successfully';
                    console.log(data);
                })
                .catch(error => {
                    clearTimeout(timeoutId);
                    if (error.name === 'AbortError') {
                        resultDiv.className = 'alert alert-warning';
                        resultDiv.textContent = `Operation cancelled after ${delay} seconds`;
                    } else {
                        resultDiv.className = 'alert alert-danger';
                        resultDiv.textContent = `Error: ${error.message}`;
                        console.error('Fetch error:', error);
                    }
                });
        }
    </script>
}